c
athlete_best_score
athlete_best_score.value
athlete_best_score
athlete_best_scode
athlete.highlight_result(competition).value
athlete.highlight_result(competition)
c
athlete.highlight_result(competition)
athlete.highlight_result(competition).first
athlete.highlight_result(competition).value
athlete.highlight_result(competition)
athlete.highlight(competition)
c
competition_athlete
c
      expect(response_body['competition_athlete']['name']).to eq('100m Rasos')
expect(response_body['competition_athlete']['id']).to eq(Competition.last.id)
      expect(response_body['competition_athlete']['id']).to eq(Competition.last.id)
      expect(response_body['competition_athlete']['name']).to eq('100m Rasos')
response_body
      expect(response_body['competition']['id']).to eq(Competition.last.id)
response.body
response
 expect { post :create, params: {
        competition_id: competition.id,
        competition_athlete: { competition_id: competition.id, athlete_id: athlete.id }
      }}
athlete.id
competition.id
c
response_body['errors']
response_body['errors']['max_attempts']
response_body['errors']
response_body
          expect(response_body['result']['max_attempts']).to eq(error_message)
          expect {
            post :create, params: {
            competition_id: competition.id, result: result
          }}.not_to change(Result, :count)
c
response_body
response
          expect {
            post :create, params: {
            competition_id: competition.id, result: result
          }}.not_to change(Result, :count)
c
result
competition
athlete
c
c]
c
athlete
result
c
@competition
c
@competition
competition
@result
result
@competition
c
@competition
@competiiton
@athlete
@competition
c
        expect(response_body['result']['value']).to eq(10.0)
        expect(response_body['result']['id']).to eq(Result.last.id)
        expect(response).to have_http_status(:created)
expect {
          post :create, params: { 
          competition_id: competition.id, result: result
        }}.to change(Result, :count).by(1)
competition.id
result
competition_athlete.competition
competition_athlete.athlete
competition_athlete
competition
athlete
c
 @competition && @athlete && @competition.subscribed?(@athlete)
@competition.athletes.where(id: @athlete.id).present?
@competition.athletes.where(id: @athlete.id)
@competition.athletes.where(id: @athlete)
@competition.athletes.where(id: athlete)
@competition.athletes
@competition
@athlete
ap @competition
ap competition
@competition
c
ap [athlete, competition, competition_athlete]
exit
exi
FactoryBot.build(:result, competition: competition, athlete: athlete).save!
c
FactoryBot.build(:result, competition: competition, athlete: athlete).save!
FactoryBot.build(:result, competition: competition, athlete: athlete).save
FactoryBot.build(:result, competition: competition, athlete: athlete).errors
FactoryBot.build(:result, competition: competition, athlete: athlete).valid?
FactoryBot.build(:result, competition: competition, athlete: athlete)
FactoryBot.build(:result, competition: competition)
FactoryBot.build(:result)
competition_athlete.competition
competition_athlete.athlete
competition_athlete.reload
competition_athlete
competition
athlete
result
competition_athlete
competition
athlete
exit
competition
athlete
result
competition.athletes
      FactoryBot.create(:competition_athlete, {
        athlete: athlete,
        competition: competition 
      })
athlete
competition
exit
      FactoryBot.create(:competition_athlete, {
        athlete_id: athlete.id,
        competition_id: competition.id 
      })
      FactoryBot.create(:competition_athlete, {
        athlete: athlete,
        competition: competition 
      })
athlete
competition
c
exit
c
@competition.athletes
c
@competition.athletes
@athlete
@competition
c
@athlete
@competition.athletes
@competition
c
@competition.athletes
@athlete
@competition
exit
@athlete.competitions
@athlete
@competition.athletes
@competition
c
      FactoryBot.create(:result, competition: competition, athlete: athlete)
    let(:result) do
      FactoryBot.create(:result, competition: competition, athlete: athlete)
    end
athlete
competition
c
competition.subscribed? athlete
competition.subscribed?
competition
competition.athletes.where(id: athlete.id).first
competition.athletes.where(id: athlete).first
competition.athletes.where(athlete: athlete).first
competition.athletes.where(athlete: athlete)
competition.athletes.where(athlete_id: athlete.id)
competition.athletes.first
competition.athletes
athlete
competition
CompetitionAthlete.last
ap [competition.id, athlete.id]
[competition.id, athlete.id]
competition
result
competition.athletes.first
competition.competition_athletes.first
competition.competition_athletes.first.athlete
competition.competition_athletes.first
competition.competition_athletes.athlete_id
competition.competition_athletes.athlete
competition.competition_athletes
competition.athletes
competition
c
exit
c
exit
FactoryBot.create(:result, :in_competition)
result
exit
c
self
        create(:competition_athlete, {
          athlete: result.athlete,
          competition: result.competition
        })
result.competition
result.athlete
result
exit
c
result
c
@competition.currently_closed?
@competition = result.competition
result
c
should belong_to(:competition)
it { should belong_to(:competition) }
subject.athlete
subject.competition
subject.competitions
subject
self
exit
c
self
competition
athlete
attempts = athlete.results.where(competition_id: id).count
c
attempts = athlete.results.where(competition_id: id).count
c
attempts = athlete.results.where(competition_id: id).count
c
attempts = athlete.results.where(competition_id: id).count
c
attempts = athlete.results.where(competition_id: id).count
c
attempts = athlete.results.where(competition_id: id).count
c
attempts = athlete.results.where(competition_id: id).count
c
attempts >= max_attempts
max_attempts
attempts = athlete.results.where(competition_id: id).count
attempts
athlete.results.where(competition_id: id).count
athlete.results.where(competition_id: id)
athlete.results
athlete
self
exit
