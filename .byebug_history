c
      expect(response_body['result']['value']).to eq(new_result[:value])
new_result[:value]
new_result
result
      expect(response_body['result']['value']).to eq(new_result['value'])
      expect(response_body['result']['value']).to eq(new_result.value)
     expect(response_body['result']['id']).to eq(result.id)
response_body
response
c
response_bodyc
response_body
      patch :update, params: {
        id: result.id, 
        competition_id: competition.id, 
        result: new_result
      }
result.athlete
result
athlete
value
c
response_body
response
c
response.body
      patch :update, params: {
        id: result.id, competition_id: competition.id, result: { value: value }
      }
competition
c
      expect(response_body).to eq(not_found_message)
      expect(response).to have_http_status(:not_found)
response.status      expect(response).to have_http_status(:not_found)
response.status
response.body
response
      get :show, params: { id: 999, competition_id: competition.id }
exit
exi
Resutc
@result
params
@result
c
delete :destroy, params: { id: result.id, competition_id: competition.id }
delete :destroy, params: { id: result.id }
delete :destroy, params: { id: result.id 
delete :destroy
delete :destriy
competition
result.competition
result
competition.id
competition;od
competition
exit
result.competition
competition
delete :destroy
delete :destroy, params: { id: result.id }
delete :destroy
c
response_body['ranking'] == ranking
response_body == ranking
ranking
response_body
c
response_body['ranking']c == ranking
response_body['ranking'] == ranking
ranking
response_body['ranking']
response_body
c
get :index, params: { competition_id: competition.id }
exit
get :index, params: { competition_id: 1  }
get :index, params: { id: 1  }
c
get :index, params: { id: 1  }
get :index, params: { id: 1, competition_id: 1 }
get :index, params: { id: 1}
get :index, params: { }
get :index, params: { }, competition_id: 1
get :index, params: { competition_id: 1 }
get :index
exit
 FactoryBot.attributes_for(:competition_athlete)
athlete
 FactoryBot.attributes_for(:competition_athlete, { athlete: athlete, competition: competition.id })
competition_athlete
competition
competition_id
competition_athlete
response.body
response_body
c
not_found_message
response.body
c
result.competition
result.athlete
athlete
c
patch :update, params: { id: 999, competition_id: competition.id, competition_athlete: { competition_id: competition_2.id } }
patch :update, params: { id: 999, competition_id: 1 }
patch :update, params: { id: 999 }
patch :update, { id: 999 }
patch :update
patch 
patch [competition, :update]
patch [competition
patch
c
patch :update, params: { competition_id: 1, competition_athlete: { } }
patch :update, params: { competition_id: 1 }
patch :update
patch
c
response_body
c
ap response_body
response_body
c
response_body['errors']['name']c
response_body['errors']['name']
response_body['errors']
response_body['errors'].first
response_body['errors'].first['name']
response_body['errors'][0]
response_body['errors'].first
response_body['errors'][0]
response_body['errors']
response_body['errors]
response_body
c
JSON.parse(response.body)['athlete']['name']
JSON.parse(response.body)['athlete']
JSON.parse(response.body)
c
JSON.parse(response.body)['athlete']c
Athlete.last.
JSON.parse(response.body)['athlete']
JSON.parse(response.body)['athlete'] == athlete.merge(Athlete.last.attributes)
JSON.parse(response.body)['athlete']
JSON.parse(response.body)['atlete']
JSON.parse(response.body['athlete'])
response.body['athlete']
response.body
athlete.merge(Athlete.last.attributes)
athlete.merge(Athlete.last.attributes_for())
athlete.merge(Athlete.last.attributes_for)
athlete.merge(Athlete.last.attributes(:name))
Athlete.last
Athlete.last.id = 99
athlete.merge(Athlete.last.attributes)
athlete
athlete.merge(Athlete.last.attributes)
Athlete.last.attributes
Athlete.last
Athelete.last
athlete
c
JSON.parse(response.body)['athlete']
JSON.parse(response.body)[0]
JSON.parse(response.body['athlete'])
JSON.parse(response.body)['athlete']
JSON.parse(response.body)[:athlete]
JSON.parse(response.body[:athlete])
JSON.parse(response.body)
response.body
athlete.merge!(id: Athlete.last.id)
athlete
exit
athletes
athletes.as_json
athletes.as_json == JSON.parse(response.body)
athletes.as_json
athletes.as_jton
athletes
JSON.parse(response.body)
response.body
should be_valid?(athlete)
should
athlete
c
 competition_athletes = @competition.competition_athletes.order(created_at: :desc)
competition = Competition.find(params[:competition_id])
Competition.find(params[:competition_id])
Competition.find(params[:competition_id]
params
exit
results.group(:athlete_id).order(value: :"#{ranking_rule}").maximum(:value)
results.group(:athlete_id).order(value: :"#{ranking_rule}").count
results.group(:athlete_id).order(value: :"#{ranking_rule}")
results.group(:athlete_id)
results.maximum(:value).group(:athlete_id)
results.maximum(:value)
results.group(:athlete_id)
results.group(:athlete_id, :competition_id).count
results.group(:athlete_id, :competition_id)
results.group(:athlete_id).count
results.group(:athlete_id)
results.group(:athlete_id).maximum(:value)
results.group(:athlete_id).max(:value)
results.group(:athlete_id).maximum(:value)
results.group(:athlete_id)
